import re
import json

def escape_quotes_inside_string_values(raw_json_str):
    # Pattern to match keys and string values, including nested structure
    pattern = r'(".*?"\s*:\s*")([^"]*?)(?<!\\)"(.*?)"'

    def replacer(match):
        key_start = match.group(1)
        before = match.group(2)
        after = match.group(3)
        fixed_value = before + '\\"' + after
        return f"{key_start}{fixed_value}"

    prev = None
    fixed = raw_json_str
    while prev != fixed:  # Repeat until no new matches (fixing nested issues)
        prev = fixed
        fixed = re.sub(pattern, replacer, fixed)

    return fixed

def sanitize_broken_json(raw_json_str):
    fixed_str = escape_quotes_inside_string_values(raw_json_str)
    try:
        parsed = json.loads(fixed_str)
        return json.dumps(parsed, indent=2)
    except json.JSONDecodeError as e:
        return f"❌ Still invalid JSON: {e}\n\nFixed Attempt:\n{fixed_str}"

# Example input with bad inner quotes
broken_json = '''
{
  "name": "John "Johnny" Doe",
  "details": {
    "title": "Senior "Engineer"",
    "notes": ["Works on "critical" systems", "Promoted in "2024""]
  }
}
'''

fixed_json = sanitize_broken_json(broken_json)
print(fixed_json)