Based on your existing prompt (as seen in the image) and your new requirements, here's a refined, concise, and comprehensive version of the COBOL-to-Java conversion prompt that includes:

Your earlier intent

Your latest requirements

Spring Framework specifics

Java 17 standards

Functional programming

Code style and naming conventions

Clean output format for easy processing



---

✅ Refined COBOL to Java Prompt (Bullet Format)

General Requirements

Convert legacy COBOL code to Java (Java 17) using the Spring Framework

Preserve original logic and business rules from COBOL

Apply functional programming where suitable (streams, lambdas, Optionals, etc.)

Follow proper OOP principles (encapsulation, abstraction, modularity)


Java & Spring Standards

Use layered architecture: Controller → Service → Repository

Use Spring annotations for dependency injection (@Component, @Service, @Autowired, etc.)

Use Spring Boot idioms where applicable (e.g., @SpringBootApplication, configuration via application.properties)

Prefer constructor-based injection over field injection


Code Quality & Structure

Use DTOs for data transfer and POJOs for models/business logic

Ensure Java naming conventions:

Class names: PascalCase

Method names: camelCase

Variables: camelCase

Constants: UPPER_SNAKE_CASE


Ensure code readability: consistent spacing, comments, modularity

Avoid unnecessary boilerplate; aim for clean, expressive code


File and Output Formatting

Ensure output JSON structure is clean and parsable via json.loads()

Properly escape special characters, headers, and data values

Output should include:

Overall system class

Dependencies section (describing class interrelations)

Individual Java class bodies (with comments)

Corresponding JUnit test classes (using standard structure)



Precision Requirements

Maintain output format and structure as in COBOL, including:

Formatting, headings, and summaries (no overlap or cut-off)

Handling of special numeric formatting (e.g., commas, decimal points)


Include initialization variables and their default values as per COBOL, unless overridden

If COBOL references external files, treat those as separate resources and document clearly

Accurately reflect input/output file specifications, including naming, delimiters, or formats



---

Would you like this prepared as a structured JSON or YAML prompt to directly feed into an LLM system/script?

