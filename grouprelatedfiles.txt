Sure! Here's the complete, optimized, and robust Python script that:


---

âœ… What It Does:

1. Takes two inputs:

input_dir: Directory (with subfolders) holding COBOL files and copybooks (no guaranteed extensions).

output_dir: Where it groups each COBOL program and its matching copybooks into its own folder.



2. Recursively scans all files in the input directory.


3. Identifies COBOL programs by checking for IDENTIFICATION DIVISION or PROGRAM-ID.


4. Extracts COPY statements and maps them to files by name (case-insensitive, no extension reliance).


5. Creates an output folder per COBOL file and puts:

The COBOL file

Any matching copybooks (if any)



6. Handles COBOL files with no COPY statements gracefully.




---

ðŸ“œ Final Code

import os
import re
import shutil
import sys
from pathlib import Path
from collections import defaultdict

def is_cobol_program(text):
    """Detects if a file is a COBOL program based on keywords."""
    return bool(re.search(r'\b(IDENTIFICATION\s+DIVISION|PROGRAM-ID)\b', text, re.IGNORECASE))

def extract_copybook_names(text):
    """Extracts COPY statements like: COPY CUSTOMER-INFO."""
    return re.findall(r'\bCOPY\s+["\']?([A-Z0-9_-]+)["\']?', text, re.IGNORECASE)

def read_text(path):
    try:
        return path.read_text(encoding='utf-8', errors='ignore')
    except Exception:
        return ''

def main(input_dir, output_dir):
    input_dir = Path(input_dir).resolve()
    output_dir = Path(output_dir).resolve()
    output_dir.mkdir(parents=True, exist_ok=True)

    # Recursively collect all files
    all_files = [f for f in input_dir.rglob('*') if f.is_file()]
    print(f"Found {len(all_files)} files in input directory.")

    # Read content for all files once
    file_content_map = {f: read_text(f) for f in all_files}

    cobol_files = {}  # file -> [copybook names]
    copybook_map = defaultdict(list)  # stem -> list of files

    # First pass: classify COBOL files and build copybook index
    for f, content in file_content_map.items():
        if is_cobol_program(content):
            cobol_files[f] = extract_copybook_names(content)
        else:
            copybook_map[f.stem.lower()].append(f)

    print(f"Identified {len(cobol_files)} COBOL programs.")

    # Process each COBOL file
    for idx, (cobol_path, copybook_names) in enumerate(cobol_files.items(), 1):
        group_folder = output_dir / f'program_{idx}'
        group_folder.mkdir(exist_ok=True)

        # Copy COBOL file
        shutil.copy2(cobol_path, group_folder)
        matched_copybooks = 0

        # Match and copy copybooks (if any)
        for name in copybook_names:
            for match_file in copybook_map.get(name.lower(), []):
                shutil.copy2(match_file, group_folder)
                matched_copybooks += 1

        print(f"[program_{idx}] {cobol_path.name} -> {matched_copybooks} copybooks")

    print("\nâœ… Grouping complete.")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python group_cobol.py <input_dir> <output_dir>")
        sys.exit(1)

    main(sys.argv[1], sys.argv[2])


---

ðŸ“¦ Example Usage

python group_cobol.py /path/to/input_dir /path/to/output_dir


---

ðŸ§  Output Example

If your input_dir has files like:

input_dir/
â”œâ”€â”€ programs/
â”‚   â””â”€â”€ sales_prog
â”œâ”€â”€ copies/
â”‚   â”œâ”€â”€ customer-detail
â”‚   â””â”€â”€ account-info

And sales_prog contains:

IDENTIFICATION DIVISION.
PROGRAM-ID. SALES.
COPY CUSTOMER-DETAIL.
COPY ACCOUNT-INFO.

Then output will be:

output_dir/
â””â”€â”€ program_1/
    â”œâ”€â”€ sales_prog
    â”œâ”€â”€ customer-detail
    â””â”€â”€ account-info


---

âœ… Handles:

COBOL


